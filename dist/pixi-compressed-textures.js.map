{"version":3,"file":"pixi-compressed-textures.js","sourceRoot":"","sources":["../src/CompressedImage.ts","../src/loaders/AbstractInteranlLoader.ts","../src/loaders/ASTCLoader.ts","../src/loaders/DDSLoader.ts","../src/loaders/PVRTCLoader.ts","../src/loaders/BASISLoader.ts","../src/loaders/CRNLoader.ts","../src/CompressedTextureManager.ts","../src/ImageParser.ts","../src/extensionChooser.ts","../src/extensionFixer.ts","../src/xporter.ts","../src/loaders/WorkedBASISLoader.ts","../src/loaders/_worker/BasisWorker.ts","../src/loaders/_worker/WorkerSource.ts"],"names":[],"mappings":"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","sourcesContent":["\r\n\r\ndeclare namespace PIXI {\r\n    interface GLTexture {\r\n        compressed?: boolean;\r\n    }\r\n}\r\n\r\nnamespace pixi_compressed_textures {\r\n\r\n    export function loadFromArrayBuffer(arrayBuffer: ArrayBuffer, src: string, crnLoad?: boolean): CompressedImage {\r\n        return new CompressedImage(src).loadFromArrayBuffer(arrayBuffer, crnLoad);\r\n    }\r\n\r\n    export class CompressedImage extends PIXI.resources.Resource {\r\n        private _internalLoader: AbstractInternalLoader;\r\n\r\n        constructor(src: string, data?: Uint8Array, type?: string, width?: number, height?: number, levels?: number, internalFormat?: number) {\r\n            super();\r\n            this.init(src, data, type, width, height, levels, internalFormat)\r\n        }\r\n\r\n        init(src: string, data: Uint8Array, type: string, width: number = -1, height: number = -1, levels: number, internalFormat: number): CompressedImage {\r\n            this.src = src;\r\n            (this.resize as any)(width, height);\r\n            this._width = width;\r\n            this._height = height;\r\n            this.data = data;\r\n            this.type = type;\r\n            this.levels = levels;\r\n            this.internalFormat = internalFormat;\r\n\r\n            let oldComplete = this.complete;\r\n            this.complete = !!data;\r\n            if (!oldComplete && this.complete && this.onload) {\r\n                this.onload({target: this});\r\n            }\r\n            this.update();\r\n\r\n            return this;\r\n        }\r\n\r\n        complete = false;\r\n        isCompressedImage = true;\r\n        preserveSource = true;\r\n\r\n        onload: (event: Object) => void = null;\r\n\r\n        src: string;\r\n        data: Uint8Array;\r\n        type: string;\r\n        width: number;\r\n        height: number;\r\n        levels: number;\r\n        internalFormat: number;\r\n\r\n        baseTexture: PIXI.BaseTexture = null;\r\n\r\n        dispose() {\r\n            this.data = null;\r\n        }\r\n\r\n        bind(baseTexture: PIXI.BaseTexture) {\r\n            if (baseTexture.alphaMode !== undefined)\r\n            {\r\n                // 5.2.0\r\n                baseTexture.alphaMode = PIXI.ALPHA_MODES.NO_PREMULTIPLIED_ALPHA;\r\n            } else\r\n            {\r\n                // 5.1.2\r\n                (baseTexture as any).premultiplyAlpha = false;\r\n            }\r\n            super.bind(baseTexture);\r\n        }\r\n\r\n        upload(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture): boolean {\r\n            const gl = renderer.state.gl;\r\n\r\n            glTexture.compressed = false;\r\n            renderer.texture.initCompressed();\r\n\r\n            if (this.data === null) {\r\n                throw \"Trying to create a second (or more) webgl texture from the same CompressedImage : \" + this.src;\r\n            }\r\n\r\n            const levels = this.levels;\r\n            \r\n            let width = this.width;\r\n            let height = this.height;\r\n            let offset = 0;\r\n\r\n            //TODO: support cubemap resources, target is not TEXTURE_2D for them\r\n            //TODO: support anisotropic levels\r\n\r\n            // Loop through each mip level of compressed texture data provided and upload it to the given texture.\r\n            for (let i = 0; i < levels; ++i) {\r\n                \r\n                // Determine how big this level of compressed texture data is in bytes.\r\n                const levelSize = this._internalLoader.levelBufferSize(width, height, i);\r\n                \r\n                // Get a view of the bytes for this level of DXT data.\r\n                let dxtLevel = new Uint8Array(this.data.buffer, this.data.byteOffset + offset, levelSize);\r\n\r\n                // Upload!\r\n                gl.compressedTexImage2D(gl.TEXTURE_2D, i, this.internalFormat, width, height, 0, dxtLevel);\r\n                // The next mip level will be half the height and width of this one.\r\n                \r\n                width = width >> 1;\r\n                if (width < 1) {\r\n                    width = 1;\r\n                }\r\n                \r\n                height = height >> 1;\r\n                if (height < 1) {\r\n                    height = 1;\r\n                }\r\n                // Advance the offset into the compressed texture data past the current mip level's data.\r\n                offset += levelSize;\r\n            }\r\n            \r\n            //clean internal loader data\r\n            this._internalLoader.free();\r\n      \r\n            // Cleaning the data to save memory. NOTE : BECAUSE OF THIS WE CANNOT CREATE TWO GL TEXTURE FROM THE SAME COMPRESSED IMAGE !\r\n            if (!this.preserveSource)\r\n                this.data = null;\r\n\r\n            return true;\r\n        }\r\n\r\n        style(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture): boolean {\r\n            // We can't use gl.generateMipmaps with compressed textures, so only use\r\n            // mipmapped filtering if the compressed texture data contained mip levels.\r\n\r\n            const gl = renderer.state.gl;\r\n            const levels = this.levels;\r\n            if (baseTexture.scaleMode === PIXI.SCALE_MODES.LINEAR) {\r\n                if (levels > 1 && glTexture.mipmap) {\r\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);\r\n                } else {\r\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n                }\r\n            } else {\r\n                if (levels > 1 && glTexture.mipmap) {\r\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST_MIPMAP_NEAREST);\r\n                } else {\r\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n                }\r\n            }\r\n\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, glTexture.wrapMode);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, glTexture.wrapMode);\r\n\r\n            return true;\r\n        }\r\n\r\n        loadFromArrayBuffer(arrayBuffer: ArrayBuffer, crnLoad?: boolean): CompressedImage {\r\n            const loaders = Loaders;\r\n            \r\n            if(!loaders || !loaders.length) {\r\n                throw \"Registered compressed loaders is missing. Call `TextureSystem.initCompressed` before loading!\";\r\n            }\r\n\r\n            let selectedLoaderCtr = undefined;\r\n            \r\n            for(let loader of loaders) {\r\n                if(!crnLoad) {\r\n                    if(loader.test(arrayBuffer)) {\r\n                        selectedLoaderCtr = loader;\r\n                        break;\r\n                    }\r\n                } else {\r\n                    /// so.... \r\n                    if(loader.type === \"CRN\"){\r\n                        selectedLoaderCtr = loader;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            //todo: implement onload\r\n            if (selectedLoaderCtr){\r\n                this._internalLoader = new selectedLoaderCtr(this);\r\n                return this._internalLoader.load(arrayBuffer);\r\n            } else {\r\n                throw new Error(\"Compressed texture format is not recognized: \" + this.src);\r\n            }\r\n        }\r\n    }\r\n}\r\n","namespace pixi_compressed_textures {\r\n    /**\r\n     * Basic Abstrcat Loader for compressed textures\r\n     * \r\n     */\r\n    export abstract class AbstractInternalLoader {\r\n        /**\r\n         * Loader type \r\n         */\r\n        public static type: string = \"ABSTRACT\";\r\n        \r\n        protected _format: number = 0;\r\n        \r\n        constructor(protected _image: CompressedImage = new CompressedImage(\"unknown\")) {\r\n            //@ts-ignore\r\n            _image._internalLoader = this;\r\n        }\r\n        \r\n        /**\r\n         * Calculate buffer size form specific width/height and mip level\r\n         * \r\n         * @param width texture width\r\n         * @param height texture height\r\n         * @param mipLevel mipLevel\r\n         */\r\n        public abstract levelBufferSize(width: number, height: number, mipLevel?: number): number;\r\n        \r\n        /**\r\n         * Load texture from buffer\r\n         * \r\n         * @param buffer \r\n         */\r\n        public abstract load(buffer: ArrayBuffer): CompressedImage;\r\n        \r\n        /**\r\n         * Free internals buffers\r\n         * \r\n         */\r\n        public free(): void {};\r\n\r\n        /**\r\n         * Test buffer header for supporting to decodings of current loader\r\n         * \r\n         * @param arrayBuffer \r\n         */\r\n        static test(arrayBuffer: ArrayBuffer) {\r\n            return false;\r\n        }\r\n    }\r\n}","/// <reference path=\"./AbstractInteranlLoader.ts\"/>\r\n\r\n// ASTC Formats, from\r\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_astc/\r\n// https://arm-software.github.io/opengl-es-sdk-for-android/astc_textures.html\r\n\r\n/** HEADER\r\n * struct astcheader\r\n    {\r\n        uint8_t magic [ 4 ] ;\r\n        uint8_t blockdim_x ;\r\n        uint8_t blockdim_y ;\r\n        uint8_t blockdim_z ;\r\n        uint8_t x_size [ 3 ] ;\r\n        uint8_t y_size [ 3 ] ;\r\n        uint8_t z_size [ 3 ] ;\r\n    } ;\r\n */\r\n\r\nnamespace pixi_compressed_textures {\r\n\r\n    // headers\r\n    const ASTC_HEADER_LENGTH = 16;\r\n    // uint 8\r\n    const ASTC_HEADER_DIM_X = 4;\r\n    // uint 8\r\n    const ASTC_HEADER_DIM_Y = 5;\r\n    // uint 24\r\n    const ASTC_HEADER_WIDTH = 7;\r\n    //uint 24\r\n    const ASTC_HEADER_HEIGHT = 10;\r\n\r\n    const ASTC_MAGIC = 0x5CA1AB13;\r\n\r\n    /* Compressed Texture Format */\r\n    const COMPRESSED_RGBA_ASTC_4x4_KHR = 0x93B0;\r\n    const COMPRESSED_RGBA_ASTC_5x4_KHR = 0x93B1;\r\n    const COMPRESSED_RGBA_ASTC_5x5_KHR = 0x93B2;\r\n    const COMPRESSED_RGBA_ASTC_6x5_KHR = 0x93B3;\r\n    const COMPRESSED_RGBA_ASTC_6x6_KHR = 0x93B4;\r\n    const COMPRESSED_RGBA_ASTC_8x5_KHR = 0x93B5;\r\n    const COMPRESSED_RGBA_ASTC_8x6_KHR = 0x93B6;\r\n    const COMPRESSED_RGBA_ASTC_8x8_KHR = 0x93B7;\r\n    const COMPRESSED_RGBA_ASTC_10x5_KHR = 0x93B8;\r\n    const COMPRESSED_RGBA_ASTC_10x6_KHR = 0x93B9;\r\n    const COMPRESSED_RGBA_ASTC_10x8_KHR = 0x93BA;\r\n    const COMPRESSED_RGBA_ASTC_10x10_KHR = 0x93BB;\r\n    const COMPRESSED_RGBA_ASTC_12x10_KHR = 0x93BC;\r\n    const COMPRESSED_RGBA_ASTC_12x12_KHR = 0x93BD;\r\n\r\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 0x93D0;\r\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 0x93D1;\r\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 0x93D2;\r\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 0x93D3;\r\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 0x93D4;\r\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 0x93D5;\r\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 0x93D6;\r\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 0x93D7;\r\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 0x93D8;\r\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 0x93D9;\r\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 0x93DA;\r\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 0x93DB;\r\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 0x93DC;\r\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 0x93DD;\r\n\r\n    const ASTC_DIMS_TO_FORMAT = {\r\n        [4 * 4]: 0,\r\n        [5 * 4]: 1,\r\n        [5 * 5]: 2,\r\n        [6 * 5]: 3,\r\n        [6 * 6]: 4,\r\n        [8 * 5]: 5,\r\n        [8 * 6]: 6,\r\n        [8 * 8]: 7,\r\n        [10 * 5]: 8,\r\n        [10 * 6]: 9,\r\n        [10 * 8]: 10,\r\n        [10 * 10]: 11,\r\n        [12 * 10]: 12,\r\n        [12 * 12]: 13\r\n    }\r\n    \r\n    export class ASTCLoader extends AbstractInternalLoader {\r\n        public static type = \"ASTC\";\r\n        private _blockSize: { x: number; y: number } = { x: 0, y: 0 };\r\n\r\n        constructor(_image: CompressedImage, public useSRGB = false) {\r\n            super(_image);\r\n        }\r\n\r\n        load(buffer: ArrayBuffer) {\r\n            if (!ASTCLoader.test(buffer)) {\r\n                // Do some sanity checks to make sure this is a valid ASTC file.\r\n                throw \"Invalid magic number in ASTC header\";\r\n            }\r\n\r\n            const header = new Uint8Array(buffer, 0, ASTC_HEADER_LENGTH);\r\n            const dim_x = header[ASTC_HEADER_DIM_X];\r\n            const dim_y = header[ASTC_HEADER_DIM_Y];\r\n            const width = (header[ASTC_HEADER_WIDTH]) + (header[ASTC_HEADER_WIDTH + 1] << 8) + (header[ASTC_HEADER_WIDTH + 2] << 16);\r\n            const height = (header[ASTC_HEADER_HEIGHT]) + (header[ASTC_HEADER_HEIGHT + 1] << 8) + (header[ASTC_HEADER_HEIGHT + 2] << 16);\r\n            const internalFormat = ASTC_DIMS_TO_FORMAT[dim_x * dim_y] + (this.useSRGB ? COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : COMPRESSED_RGBA_ASTC_4x4_KHR);\r\n            const astcData = new Uint8Array(buffer, ASTC_HEADER_LENGTH);\r\n\r\n            this._format = internalFormat;\r\n            this._blockSize.x = dim_x;\r\n            this._blockSize.y = dim_y;\r\n\r\n            const dest = this._image;\r\n            dest.init(dest.src, astcData, 'ASTC', width, height, 1, internalFormat);\r\n            return dest;\r\n        }\r\n\r\n        static test(buffer: ArrayBuffer) {\r\n            const magic = new Int32Array(buffer, 0, 1);\r\n            return magic[0] === ASTC_MAGIC;\r\n        }\r\n\r\n        levelBufferSize(width: number, height: number, mipLevel: number = 0): number {\r\n            const f_ = Math.floor;\r\n            const dim_x = this._blockSize.x;\r\n            const dim_y = this._blockSize.y;\r\n\r\n            return (f_((width + dim_x - 1) / dim_x) * f_((height + dim_y - 1) / dim_y)) << 4;\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"./AbstractInteranlLoader.ts\"/>\r\n\r\n\r\n// Utility functions\r\n// Builds a numeric code for a given fourCC string\r\nfunction fourCCToInt32(value: string) {\r\n    return value.charCodeAt(0) +\r\n        (value.charCodeAt(1) << 8) +\r\n        (value.charCodeAt(2) << 16) +\r\n        (value.charCodeAt(3) << 24);\r\n}\r\n\r\n// Turns a fourCC numeric code into a string\r\nfunction int32ToFourCC(value: number) {\r\n    return String.fromCharCode(\r\n        value & 0xff,\r\n        (value >> 8) & 0xff,\r\n        (value >> 16) & 0xff,\r\n        (value >> 24) & 0xff\r\n    );\r\n}\r\n\r\nnamespace pixi_compressed_textures {\r\n    // DXT values and structures referenced from:\r\n    // http://msdn.microsoft.com/en-us/library/bb943991.aspx/\r\n    const DDS_MAGIC = 0x20534444;\r\n    const DDSD_MIPMAPCOUNT = 0x20000;\r\n    const DDPF_FOURCC = 0x4;\r\n    const DDS_HEADER_LENGTH = 31; // The header length in 32 bit ints.\r\n\r\n    // Offsets into the header array.\r\n    const DDS_HEADER_MAGIC = 0;\r\n    const DDS_HEADER_SIZE = 1;\r\n    const DDS_HEADER_FLAGS = 2;\r\n    const DDS_HEADER_HEIGHT = 3;\r\n    const DDS_HEADER_WIDTH = 4;\r\n    const DDS_HEADER_MIPMAPCOUNT = 7;\r\n    const DDS_HEADER_PF_FLAGS = 20;\r\n    const DDS_HEADER_PF_FOURCC = 21;\r\n\r\n    // FourCC format identifiers.\r\n    const FOURCC_DXT1 = fourCCToInt32(\"DXT1\");\r\n    const FOURCC_DXT3 = fourCCToInt32(\"DXT3\");\r\n    const FOURCC_DXT5 = fourCCToInt32(\"DXT5\");\r\n\r\n    const FOURCC_ATC = fourCCToInt32(\"ATC \");\r\n    const FOURCC_ATCA = fourCCToInt32(\"ATCA\");\r\n    const FOURCC_ATCI = fourCCToInt32(\"ATCI\");\r\n\r\n    // DXT formats, from:\r\n    // http://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_s3tc/\r\n    const COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;\r\n    const COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;\r\n    const COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;\r\n    const COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;\r\n\r\n    // ATC formats, from:\r\n    // http://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_atc/\r\n    const COMPRESSED_RGB_ATC_WEBGL = 0x8C92;\r\n    const COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL = 0x8C93;\r\n    const COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL = 0x87EE;\r\n\r\n    const FOURCC_TO_FORMAT = {\r\n        [FOURCC_DXT1]: COMPRESSED_RGB_S3TC_DXT1_EXT,\r\n        [FOURCC_DXT3]: COMPRESSED_RGBA_S3TC_DXT3_EXT,\r\n        [FOURCC_DXT5]: COMPRESSED_RGBA_S3TC_DXT5_EXT,\r\n        [FOURCC_ATC]: COMPRESSED_RGB_ATC_WEBGL,\r\n        [FOURCC_ATCA]: COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL,\r\n        [FOURCC_ATCI]: COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL\r\n    }\r\n\r\n    export class DDSLoader extends AbstractInternalLoader {\r\n        public static type = \"DDS\";\r\n        constructor(_image: CompressedImage) {\r\n            super(_image);\r\n        }\r\n\r\n        load(arrayBuffer: ArrayBuffer) {\r\n            if (!DDSLoader.test(arrayBuffer)) {\r\n                // Do some sanity checks to make sure this is a valid ASTC file.\r\n                throw \"Invalid magic number in DDS header\";\r\n            }\r\n\r\n            // Get a view of the arrayBuffer that represents the DDS header.\r\n            const header = new Int32Array(arrayBuffer, 0, DDS_HEADER_LENGTH);\r\n\r\n            if (!(header[DDS_HEADER_PF_FLAGS] & DDPF_FOURCC))\r\n                throw \"Unsupported format, must contain a FourCC code\";\r\n\r\n            // Determine what type of compressed data the file contains.\r\n            const fourCC = header[DDS_HEADER_PF_FOURCC];\r\n            let internalFormat = FOURCC_TO_FORMAT[fourCC] || -1;\r\n\r\n            if (internalFormat < 0) {\r\n                throw \"Unsupported FourCC code: \" + int32ToFourCC(fourCC);\r\n            }\r\n\r\n            // Determine how many mipmap levels the file contains.\r\n            let levels = 1;\r\n            if (header[DDS_HEADER_FLAGS] & DDSD_MIPMAPCOUNT) {\r\n                levels = Math.max(1, header[DDS_HEADER_MIPMAPCOUNT]);\r\n            }\r\n\r\n            // Gather other basic metrics and a view of the raw the DXT data.\r\n            const width = header[DDS_HEADER_WIDTH];\r\n            const height = header[DDS_HEADER_HEIGHT];\r\n            const dataOffset = header[DDS_HEADER_SIZE] + 4;\r\n            const dxtData = new Uint8Array(arrayBuffer, dataOffset);\r\n            const dest = this._image;\r\n\r\n            this._format = internalFormat;\r\n            dest.init(dest.src, dxtData, 'DDS', width, height, levels, internalFormat);\r\n\r\n            return dest;\r\n        }\r\n\r\n        static test(buffer: ArrayBuffer) {\r\n            const magic = new Int32Array(buffer, 0, 1);\r\n            return magic[0] === DDS_MAGIC;\r\n        }\r\n\r\n        levelBufferSize(width: number, height: number, mipLevel: number = 0): number {\r\n            switch (this._format) {\r\n                case COMPRESSED_RGB_S3TC_DXT1_EXT:\r\n                case COMPRESSED_RGB_ATC_WEBGL:\r\n                    return ((width + 3) >> 2) * ((height + 3) >> 2) * 8;\r\n\r\n                case COMPRESSED_RGBA_S3TC_DXT3_EXT:\r\n                case COMPRESSED_RGBA_S3TC_DXT5_EXT:\r\n                case COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL:\r\n                case COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL:\r\n                    return ((width + 3) >> 2) * ((height + 3) >> 2) * 16;\r\n\r\n                default:\r\n                    return 0;\r\n            }\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"./AbstractInteranlLoader.ts\"/>\r\n\r\nnamespace pixi_compressed_textures {\r\n    //===============//\r\n    // PVR constants //\r\n    //===============//\r\n\r\n    // PVR formats, from:\r\n    // http://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_pvrtc/\r\n    const COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00;\r\n    const COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8C01;\r\n    const COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02;\r\n    const COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8C03;\r\n\r\n    // ETC1 format, from:\r\n    // http://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_etc1/\r\n    const COMPRESSED_RGB_ETC1_WEBGL = 0x8D64;\r\n\r\n    const PVR_FORMAT_2BPP_RGB = 0;\r\n    const PVR_FORMAT_2BPP_RGBA = 1;\r\n    const PVR_FORMAT_4BPP_RGB = 2;\r\n    const PVR_FORMAT_4BPP_RGBA = 3;\r\n    const PVR_FORMAT_ETC1 = 6;\r\n    const PVR_FORMAT_DXT1 = 7;\r\n    const PVR_FORMAT_DXT3 = 9;\r\n    const PVR_FORMAT_DXT5 = 5;\r\n\r\n    const PVR_HEADER_LENGTH = 13; // The header length in 32 bit ints.\r\n    const PVR_MAGIC = 0x03525650; //0x50565203;\r\n\r\n    // Offsets into the header array.\r\n    const PVR_HEADER_MAGIC = 0;\r\n    const PVR_HEADER_FORMAT = 2;\r\n    const PVR_HEADER_HEIGHT = 6;\r\n    const PVR_HEADER_WIDTH = 7;\r\n    const PVR_HEADER_MIPMAPCOUNT = 11;\r\n    const PVR_HEADER_METADATA = 12;\r\n\r\n    // DXT formats, from:\r\n    // http://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_s3tc/\r\n    const COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;\r\n    const COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;\r\n    const COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;\r\n    const COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;\r\n\r\n    const PVR_TO_FORMAT = {\r\n        [PVR_FORMAT_2BPP_RGB] : COMPRESSED_RGB_PVRTC_2BPPV1_IMG,\r\n        [PVR_FORMAT_2BPP_RGBA] : COMPRESSED_RGBA_PVRTC_2BPPV1_IMG,\r\n        [PVR_FORMAT_4BPP_RGB] : COMPRESSED_RGB_PVRTC_4BPPV1_IMG,\r\n        [PVR_FORMAT_4BPP_RGBA] : COMPRESSED_RGBA_PVRTC_4BPPV1_IMG,\r\n        [PVR_FORMAT_ETC1] : COMPRESSED_RGB_ETC1_WEBGL,\r\n        [PVR_FORMAT_DXT1] : COMPRESSED_RGB_S3TC_DXT1_EXT,\r\n        [PVR_FORMAT_DXT3] : COMPRESSED_RGBA_S3TC_DXT3_EXT,\r\n        [PVR_FORMAT_DXT5] : COMPRESSED_RGBA_S3TC_DXT5_EXT\r\n    } as {[key: number] : number};\r\n\r\n    export class PVRTCLoader extends AbstractInternalLoader {        \r\n        public static type = \"PVR\";\r\n\r\n        constructor(_image : CompressedImage) {\r\n            super(_image);\r\n        }\r\n\r\n        load(arrayBuffer: ArrayBuffer) {\r\n            if (!PVRTCLoader.test(arrayBuffer)) {\r\n                // Do some sanity checks to make sure this is a valid ASTC file.\r\n                throw \"Invalid magic number in PVR header\";\r\n            }\r\n\r\n            // Get a view of the arrayBuffer that represents the DDS header.\r\n            const header = new Int32Array(arrayBuffer, 0, PVR_HEADER_LENGTH);\r\n\r\n            // Determine what type of compressed data the file contains.\r\n            const format = header[PVR_HEADER_FORMAT];\r\n            const internalFormat = PVR_TO_FORMAT[format] || -1;\r\n\r\n            // Gather other basic metrics and a view of the raw the DXT data.\r\n            const width = header[PVR_HEADER_WIDTH];\r\n            const height = header[PVR_HEADER_HEIGHT];\r\n            const levels = header[PVR_HEADER_MIPMAPCOUNT];\r\n            const dataOffset = header[PVR_HEADER_METADATA] + 52;\r\n            const pvrtcData = new Uint8Array(arrayBuffer, dataOffset);\r\n\r\n            const dest = this._image;\r\n            \r\n            this._format = internalFormat;\r\n            dest.init(dest.src, pvrtcData, 'PVR', width, height, levels, internalFormat);\r\n\r\n            return dest;\r\n        }\r\n\r\n        static test(buffer: ArrayBuffer) {\r\n            const magic = new Int32Array(buffer, 0, 1);\r\n            return magic[0] === PVR_MAGIC;\r\n        }\r\n\r\n        levelBufferSize(width : number, height : number, mipLevel: number = 0): number {            \r\n            switch (this._format) {\r\n                case COMPRESSED_RGB_S3TC_DXT1_EXT:\r\n                case COMPRESSED_RGB_ETC1_WEBGL:\r\n                    return ((width + 3) >> 2) * ((height + 3) >> 2) * 8;\r\n    \r\n                case COMPRESSED_RGBA_S3TC_DXT3_EXT:\r\n                case COMPRESSED_RGBA_S3TC_DXT5_EXT:\r\n                    return ((width + 3) >> 2) * ((height + 3) >> 2) * 16;\r\n    \r\n                case COMPRESSED_RGB_PVRTC_4BPPV1_IMG:\r\n                case COMPRESSED_RGBA_PVRTC_4BPPV1_IMG:\r\n                    return Math.floor((Math.max(width, 8) * Math.max(height, 8) * 4 + 7) / 8);\r\n    \r\n                case COMPRESSED_RGB_PVRTC_2BPPV1_IMG:\r\n                case COMPRESSED_RGBA_PVRTC_2BPPV1_IMG:\r\n                    return Math.floor((Math.max(width, 16) * Math.max(height, 8) * 2 + 7) / 8);\r\n    \r\n                default:\r\n                    return 0;\r\n            }\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"./AbstractInteranlLoader.ts\"/>\r\n\r\n/**\r\n * @file BASISLoader - Basis implementation for PIXI\r\n * @see https://github.com/BinomialLLC/basis_universal\r\n * \r\n * @author Timoshenko Konstantin \r\n * @see https://github.com/exponenta\r\n */\r\n\r\ndeclare class BasisFile {\r\n    constructor(buffer : Uint8Array);\r\n    getNumImages(): number;\r\n    getNumLevels(): number;\r\n    getImageWidth(imageId: number, level:number): number;\r\n    getImageHeight(imageId: number, level:number): number;\r\n    getHasAlpha(): boolean;\r\n    startTranscoding(): boolean;\r\n    getImageTranscodedSizeInBytes(imageId : number, level: number, basisFormat: number): number;\r\n    transcodeImage(dstBuff: Uint8Array, imageId: number, level: number, basisFormat: number, pvrtcWrapAddressing: boolean, getAlphaForOpaqueFormats: boolean): number\r\n}\r\n\r\nnamespace pixi_compressed_textures {\r\n\r\n    const BASIS_FORMAT = {\r\n        cTFETC1: 0, // not support alpha\r\n        // cTFETC2: 1, // not WebGL\r\n        cTFBC1: 2, // not support alpha\r\n        cTFBC3: 3,\r\n        // cTFBC4: 4, // not WebGL\r\n        // cTFBC5: 5, // not WebGL\r\n        // cTFBC7_M6_OPAQUE_ONLY: 6 // not WebGL\r\n        // cTFBC7_M5 : 7 // not WebGL\r\n        cTFPVRTC1_4_RGB: 8, // not support alpha\r\n        cTFPVRTC1_4_RGBA: 9,\r\n        cTFASTC_4x4: 10, // mobile alpha! Ehooo\r\n        // cTFATC_RGB : 11 //  not WebGL\r\n        // cTFATC_RGBA_INTERPOLATED_ALPHA : 12  not WebGL\r\n\r\n        cTFRGBA32: 11 // why not?\r\n    };\r\n\r\n    const BASIS_HAS_ALPHA = {\r\n        [3]: true, [9]: true, [10]: true, [11]: true\r\n    } as {[key: number]: boolean}\r\n\r\n    const NON_COMPRESSED = -1;\r\n    const COMPRESSED_RGB_ETC1_WEBGL = 0x8D64;\r\n    const COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;\r\n    const COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;\r\n    const COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;\r\n    const COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;\r\n    const COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00;\r\n    const COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02;\r\n    const COMPRESSED_RGBA_ASTC_4x4_KHR = 0x93B0;\r\n\r\n    const BASIS_TO_FMT = {\r\n        // fallback\r\n        [BASIS_FORMAT.cTFRGBA32]: NON_COMPRESSED,\r\n        [BASIS_FORMAT.cTFETC1]: COMPRESSED_RGB_ETC1_WEBGL,\r\n        [BASIS_FORMAT.cTFBC1]: COMPRESSED_RGB_S3TC_DXT1_EXT,\r\n        [BASIS_FORMAT.cTFBC3]: COMPRESSED_RGBA_S3TC_DXT5_EXT,\r\n        [BASIS_FORMAT.cTFPVRTC1_4_RGB]: COMPRESSED_RGB_PVRTC_4BPPV1_IMG,\r\n        [BASIS_FORMAT.cTFPVRTC1_4_RGBA]: COMPRESSED_RGBA_PVRTC_4BPPV1_IMG,\r\n        [BASIS_FORMAT.cTFASTC_4x4]: COMPRESSED_RGBA_ASTC_4x4_KHR\r\n    }\r\n\r\n    const FMT_TO_BASIS = Object.keys(BASIS_TO_FMT).reduce((acc : any, next : string) => {\r\n        acc[BASIS_TO_FMT[+next]] = +next;\r\n        return acc;\r\n    }, {} as {[key: number]: number});\r\n\r\n    export class BASISLoader extends AbstractInternalLoader {        \r\n        static BASIS_BINDING: typeof BasisFile = undefined;\r\n        static RGB_FORMAT: {basis: number, name: string, native: number};\r\n        static RGBA_FORMAT: {basis: number, name: string, native: number};\r\n\r\n        type = \"BASIS\";\r\n\r\n        private _file : BasisFile = undefined;\r\n\r\n        constructor(_image : CompressedImage) {\r\n            super(_image);\r\n        }\r\n\r\n        static test(array: ArrayBuffer) {\r\n            const header = new Uint32Array(array, 0, 1)[0];      \r\n            const decoder = !!BASISLoader.BASIS_BINDING;\r\n            const isValid = header === 0x134273 && decoder;\r\n            const isSupported = BASISLoader.RGB_FORMAT && BASISLoader.RGBA_FORMAT;\r\n\r\n            if (!isValid && isSupported) {\r\n                console.warn(\"[BASIS LOADER] Is Supported, but transcoder not binded or file is not BASIS file!\");\r\n            }\r\n\r\n            return (isSupported && isValid);\r\n        }\r\n\r\n        /**\r\n         * Binding BASIS Transcoder to loader\r\n         * \r\n         * @param fileCtr BASIS File contreuctor\r\n         * @param ext supported extension, grub it from `app.renderer.plugins.texture.compressedExtensions`\r\n         */\r\n        static bindTranscoder(fileCtr: typeof BasisFile, ext: any) {\r\n            if(!fileCtr || !ext) {\r\n                throw \"Invalid state! undef fileCtr or ext invalid!\"\r\n            };\r\n\r\n            // fetch list of ALL extensions\r\n            const plain = Object.keys(ext)\r\n                .reduce((acc, key) => {\r\n                    const val = ext [key];\r\n                    if (!val) { \r\n                        return acc; \r\n                    };\r\n                    return Object.assign(acc, val.__proto__);\r\n                }, {});\r\n\r\n            let latestOp = undefined;\r\n            let lastestAlpha = undefined;\r\n\r\n            // SELECT SUPPORT\r\n            for (let v in plain) {\r\n                const native = plain[v];\r\n                if (FMT_TO_BASIS[native] !== undefined) {\r\n                    let basis = FMT_TO_BASIS[native] as number;\r\n                    if (BASIS_HAS_ALPHA[basis]) {\r\n                        lastestAlpha = {\r\n                            native, name: v, basis\r\n                        }\r\n                    } else {\r\n                        latestOp = {\r\n                            native, name: v, basis\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            BASISLoader.RGB_FORMAT = latestOp || lastestAlpha;\r\n            BASISLoader.RGBA_FORMAT = lastestAlpha || latestOp;\r\n            BASISLoader.BASIS_BINDING = fileCtr;\r\n\r\n            console.log(\r\n                    `[BASISLoader] Supported formats:`,\r\n                    `\\nRGB:${BASISLoader.RGB_FORMAT.name}\\nRGBA:${BASISLoader.RGBA_FORMAT.name}`\r\n            );\r\n\r\n            //Register self after bunding\r\n            RegisterCompressedLoader(BASISLoader);\r\n            RegisterCompressedExtensions('basis');\r\n        }\r\n\r\n        load(buffer : ArrayBuffer) {            \r\n            if(!BASISLoader.test(buffer)) {\r\n                throw \"BASIS Transcoder not binded or transcoding not supported =(!\";\r\n            }\r\n\r\n            this._loadAsync(buffer);\r\n            return this._image;\r\n        }\r\n\r\n        _loadAsync(buffer : ArrayBuffer) {            \r\n            const startTime = performance.now();\r\n            const BasisFileCtr = BASISLoader.BASIS_BINDING as any;\r\n            const basisFile = new BasisFileCtr(new Uint8Array(buffer)) as BasisFile;\r\n            const width = basisFile.getImageWidth(0, 0);\r\n            const height = basisFile.getImageHeight(0, 0);\r\n            // const images = await basisFile.getNumImages(); // not support yet\r\n            const levels = 1;//await basisFile.getNumLevels( 0 ); // not support yet\r\n            const hasAlpha = basisFile.getHasAlpha();\r\n            const dest = this._image;\r\n\r\n            if (!basisFile.startTranscoding()) {\r\n                throw \"Transcoding error!\";\r\n            }\r\n\r\n            const target = hasAlpha ? BASISLoader.RGBA_FORMAT : BASISLoader.RGB_FORMAT;\r\n\r\n            console.log(\"Grats! BASIS will be transcoded to:\", target);\r\n\r\n            const dst = new Uint8Array(basisFile.getImageTranscodedSizeInBytes(0, 0, target.basis));\r\n          \r\n            if (!basisFile.transcodeImage(dst, 0, 0, target.basis, !!0, !!0)) {\r\n                throw \"Transcoding error!\";\r\n            }\r\n\r\n            console.log(\"[BASISLoader] Totla transcoding time:\", performance.now() - startTime);\r\n           \r\n            this._format = target.native;\r\n            this._file = basisFile;\r\n\r\n            let name = target.name.replace(\"COMPRESSED_\", \"\");\r\n\r\n            return Promise.resolve(dest.init(dest.src, dst, 'BASIS|' + name, width, height, levels, target.native));\r\n        }\r\n\r\n        levelBufferSize(width : number, height: number, level: number): number {\r\n            return this._file ? this._file.getImageTranscodedSizeInBytes(0, level, FMT_TO_BASIS[this._format]) : undefined;\r\n        }\r\n    }\r\n}","/// <reference path=\"./AbstractInteranlLoader.ts\"/>\r\n\r\ndeclare module CRN_Module {\r\n    export function _free(src: number): void\r\n\r\n    export let HEAPU8: Uint8Array;\r\n\r\n    export function _crn_get_width(src: number, size: number): number;\r\n\r\n    export function _crn_get_height(src: number, size: number): number;\r\n\r\n    export function _crn_get_levels(src: number, size: number): number;\r\n\r\n    export function _crn_get_dxt_format(src: number, size: number): number;\r\n\r\n    export function _crn_get_uncompressed_size(src: number, size: number, stuff: number): number;\r\n\r\n    export function _malloc(size: number): number;\r\n\r\n    export function _crn_decompress(src: number, srcSize: number, dst: number, dstSize: number, stuff: number): void;\r\n}\r\n\r\nnamespace pixi_compressed_textures {\r\n    \r\n    const CRN_Module = (window as any).CRN_Module;\r\n\r\n    function arrayBufferCopy(src: Uint8Array, dst: Uint8Array, dstByteOffset: number, numBytes: number): void {\r\n        const dst32Offset = dstByteOffset / 4;\r\n        const tail = (numBytes % 4);\r\n        const src32 = new Uint32Array(src.buffer, 0, (numBytes - tail) / 4);\r\n        const dst32 = new Uint32Array(dst.buffer);\r\n        for (let ii = 0; ii < src32.length; ii++) {\r\n            dst32[dst32Offset + ii] = src32[ii];\r\n        }\r\n        for (let i = numBytes - tail; i < numBytes; i++) {\r\n            dst[dstByteOffset + i] = src[i];\r\n        }\r\n    }\r\n\r\n    \r\n    // DXT formats, from:\r\n    // http://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_s3tc/\r\n    const COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;\r\n    const COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;\r\n    const COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;\r\n\r\n    // Taken from crnlib.h\r\n    const DXT_FORMAT_MAP = [\r\n        COMPRESSED_RGB_S3TC_DXT1_EXT, \t// 0\r\n        COMPRESSED_RGBA_S3TC_DXT3_EXT,  // 1\r\n        COMPRESSED_RGBA_S3TC_DXT5_EXT \t// 2\r\n    ];\r\n\r\n    export class CRNLoader extends AbstractInternalLoader {\r\n        public static type = \"CRN\";\r\n        private _caches : number [];\r\n        constructor(_image: CompressedImage) {\r\n            super(_image);\r\n        }\r\n\r\n        load(arrayBuffer: ArrayBuffer) {\r\n\r\n            const srcSize = arrayBuffer.byteLength;\r\n            const bytes = new Uint8Array(arrayBuffer);\r\n            const src = CRN_Module._malloc(srcSize);\r\n\r\n            arrayBufferCopy(bytes, CRN_Module.HEAPU8, src, srcSize);\r\n\r\n            const width = CRN_Module._crn_get_width(src, srcSize);\r\n            const height = CRN_Module._crn_get_height(src, srcSize);\r\n            const levels = CRN_Module._crn_get_levels(src, srcSize);\r\n            const format = CRN_Module._crn_get_dxt_format(src, srcSize);\r\n            const dstSize = CRN_Module._crn_get_uncompressed_size(src, srcSize, 0);\r\n            const dst = CRN_Module._malloc(dstSize);\r\n\r\n            CRN_Module._crn_decompress(src, srcSize, dst, dstSize, 0);\r\n\r\n            const dxtData = new Uint8Array(CRN_Module.HEAPU8.buffer, dst, dstSize);\r\n            const internalFormat = DXT_FORMAT_MAP[format];\r\n            const dest = this._image;\r\n\r\n            this._format = internalFormat;\r\n            this._caches = [src, dst];\r\n\r\n            return dest.init(dest.src, dxtData, 'CRN', width, height, levels, internalFormat);\r\n        }\r\n\r\n        levelBufferSize(width: number, height: number, mipLevel: number = 0): number {\r\n            // same as in DDS\r\n            return DDSLoader.prototype.levelBufferSize.call(this, width, height, mipLevel);\r\n        }\r\n\r\n        free() {\r\n            CRN_Module._free(this._caches[0]);\r\n            CRN_Module._free(this._caches[1]);\r\n            \r\n        }\r\n\r\n        static test(buffer: ArrayBuffer) {\r\n            return !!CRN_Module;\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"./loaders/ASTCLoader.ts\"/>\r\n/// <reference path=\"./loaders/DDSLoader.ts\"/>\r\n/// <reference path=\"./loaders/PVRTCLoader.ts\"/>\r\n/// <reference path=\"./loaders/BASISLoader.ts\"/>\r\n/// <reference path=\"./loaders/CRNLoader.ts\"/>\r\n\r\ndeclare namespace PIXI.systems {\r\n\tinterface TextureSystem {\r\n\t\tinitCompressed?(): void;\r\n\r\n\t\tregisterCompressedLoader?(loader: any): void;\r\n\r\n\t\tcompressedExtensions?: any;\r\n\t}\r\n}\r\n\r\nnamespace pixi_compressed_textures {\r\n\r\n\texport let Loaders: Array<any> = [\r\n\t\tDDSLoader,\r\n\t\tPVRTCLoader,\r\n\t\tASTCLoader,\r\n\t\tCRNLoader\r\n\t];\r\n\r\n\tPIXI.systems.TextureSystem.prototype.initCompressed = function () {\r\n\t\tconst gl = this.gl;\r\n\t\tif (!this.compressedExtensions) {\r\n\t\t\tthis.compressedExtensions = {\r\n\t\t\t\tdxt: gl.getExtension(\"WEBGL_compressed_texture_s3tc\"),\r\n\t\t\t\tpvrtc: (gl.getExtension(\"WEBGL_compressed_texture_pvrtc\") || gl.getExtension(\"WEBKIT_WEBGL_compressed_texture_pvrtc\")), // 09-21-2019 -- IOS require it\r\n\t\t\t\tastc: gl.getExtension(\"WEBGL_compressed_texture_astc\"),\r\n\t\t\t\tatc: gl.getExtension(\"WEBGL_compressed_texture_atc\"),\r\n\t\t\t\tetc1: gl.getExtension(\"WEBGL_compressed_texture_etc1\")\r\n\t\t\t};\r\n\t\t\tthis.compressedExtensions.crn = this.compressedExtensions.dxt;\r\n\t\t}\r\n\t};\r\n\r\n\texport function RegisterCompressedLoader(...loaders: any[]): void {\r\n\t\tLoaders = Loaders || [];\r\n\t\tfor (let e in loaders) {\r\n\t\t\tif (Loaders.indexOf(loaders[e]) < 0) {\r\n\t\t\t\tLoaders.push(loaders[e])\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\texport let defaultDetectedExtensions = ['.png', '.jpg', '.json', '.atlas'];\r\n\r\n\texport function detectExtensions(renderer: PIXI.Renderer, resolution?: number, defaultResolution: number = 1) {\r\n\t\tlet extensions = [];\r\n\t\tif (renderer instanceof PIXI.Renderer) {\r\n\t\t\trenderer.texture.initCompressed();\r\n\t\t\tlet data = renderer.texture.compressedExtensions;\r\n\t\t\tif (data.dxt) extensions.push('.dds');\r\n\t\t\tif (data.pvrtc) extensions.push('.pvr');\r\n\t\t\tif (data.atc) extensions.push('.atc');\r\n\t\t\tif (data.astc) extensions.push('.astc');\r\n\t\t\tif (data.etc1) extensions.push('.etc1');\r\n\t\t}\r\n\t\t//retina or not\r\n\t\tlet ext = extensions.slice(0);\r\n\r\n\t\tlet resolutions = [resolution || renderer.resolution];\r\n\t\tif (defaultResolution) {\r\n\t\t\tresolutions.push(defaultResolution);\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < resolutions.length; i++) {\r\n\t\t\tlet res = \"@\" + resolutions[i] + \"x\";\r\n\t\t\tfor (let j = 0; j < ext.length; j++) {\r\n\t\t\t\textensions.push(res + ext[j]);\r\n\t\t\t}\r\n\t\t\tfor (let j = 0; j < defaultDetectedExtensions.length; j++) {\r\n\t\t\t\textensions.push(res + defaultDetectedExtensions[j]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn extensions;\r\n\t}\r\n}\r\n","declare namespace PIXI {\r\n    interface LoaderResource {\r\n        compressedImage?: pixi_compressed_textures.CompressedImage;\r\n        isCompressedImage?: boolean;\r\n    }\r\n}\r\n\r\nnamespace pixi_compressed_textures {\r\n    import Resource = PIXI.LoaderResource;\r\n\r\n    export const TEXTURE_EXTENSIONS :  string[] = [];\r\n\r\n    export function RegisterCompressedExtensions(...exts: string[]) {\r\n        for(let e in exts) {\r\n            if(TEXTURE_EXTENSIONS.indexOf(exts[e]) < 0) {\r\n                TEXTURE_EXTENSIONS.push(exts[e]);\r\n                Resource.setExtensionXhrType(exts[e], Resource.XHR_RESPONSE_TYPE.BUFFER);\r\n            }\r\n        }        \r\n    }\r\n\r\n    export class ImageParser {\r\n        static use(this: PIXI.Loader, resource: PIXI.LoaderResource, next: () => any) {\r\n\r\n            const url = resource.url;\r\n            const idx = url.lastIndexOf('.');\r\n            const amper = url.lastIndexOf('?');\r\n            const ext = url.substring(idx + 1, amper > 0 ? amper : url.length );\r\n\r\n            if (TEXTURE_EXTENSIONS.indexOf(ext) < 0) {\r\n                next();\r\n                return;\r\n            }\r\n\r\n            if (!resource.data) {\r\n                throw new Error(\"compressedImageParser middleware for PixiJS v5 must be specified in loader.use()\" +\r\n                    \" and must have resource.data when completed\");\r\n            }\r\n            if (resource.compressedImage) {\r\n                // ImageParser was added twice! ignore it.\r\n                next();\r\n                return;\r\n            }\r\n            resource.compressedImage = new CompressedImage(resource.url);\r\n            resource.compressedImage.loadFromArrayBuffer(resource.data, ext === 'crn');\r\n            resource.isCompressedImage = true;\r\n            resource.texture = fromResource(resource.compressedImage, resource.url, resource.name);\r\n            next();\r\n        }\r\n    }\r\n\r\n    function fromResource(resource: PIXI.resources.Resource, imageUrl: string, name: string) {\r\n        const baseTexture = new PIXI.BaseTexture(resource, {\r\n            scaleMode: PIXI.settings.SCALE_MODE,\r\n            resolution: PIXI.utils.getResolutionOfUrl(imageUrl),\r\n        });\r\n\r\n        const texture = new PIXI.Texture(baseTexture);\r\n\r\n        // No name, use imageUrl instead\r\n        if (!name)\r\n        {\r\n            name = imageUrl;\r\n        }\r\n\r\n        // lets also add the frame to pixi's global cache for 'fromLoader' function\r\n        PIXI.BaseTexture.addToCache(texture.baseTexture, name);\r\n        PIXI.Texture.addToCache(texture, name);\r\n\r\n        // also add references by url if they are different.\r\n        if (name !== imageUrl)\r\n        {\r\n            PIXI.BaseTexture.addToCache(texture.baseTexture, imageUrl);\r\n            PIXI.Texture.addToCache(texture, imageUrl);\r\n        }\r\n\r\n        return texture;\r\n    }\r\n    \r\n    RegisterCompressedExtensions('dds','crn','pvr','etc1','astc');\r\n    PIXI.Loader.registerPlugin(ImageParser);\r\n}\r\n","declare namespace PIXI {\r\n    interface LoaderResource {\r\n        _defaultUrlChoice?: string;\r\n        _defaultUrl?: string;\r\n        _baseUrl?: string;\r\n    }\r\n}\r\n\r\nnamespace pixi_compressed_textures {\r\n    export function extensionChooser(supportedExtensions: Array<string> = []) {\r\n        return function (this: PIXI.Loader, resource: PIXI.LoaderResource, next: () => any) {\r\n            let ext = resource.metadata.choice;\r\n            if (!ext) {\r\n                return next();\r\n            }\r\n            //let us choose extension!\r\n            let url = resource.url;\r\n            let k = 0;\r\n            if (!resource._defaultUrlChoice) {\r\n                resource._defaultUrlChoice = url;\r\n                k = url.lastIndexOf(\".\");\r\n                if (k >= 0) {\r\n                    resource._baseUrl = url.substring(0, k);\r\n                } else {\r\n                    return next();\r\n                }\r\n            }\r\n            for (let i = ext.length - 1; i >= 0; i--) {\r\n                url = resource._baseUrl + ext[i];\r\n                let isSupported = false;\r\n                for (let j = 0; j < supportedExtensions.length; j++) {\r\n                    if (ext[i] === supportedExtensions[j]) {\r\n                        resource.url = url;\r\n\r\n                        let pureExt = ext[i];\r\n                        if (pureExt.indexOf('@') > -1) {\r\n                            //@0.5x.dds should have pureExt \"dds\", not 5x.dds\r\n                            // -> remove format specifier (@2x, @0.5x) before\r\n                            //determining the extension\r\n                            pureExt = pureExt.replace(/@[0-9.]*x/, \"\");\r\n                        }\r\n                        k = pureExt.indexOf('.');\r\n                        if (k >= 0) {\r\n                            pureExt = pureExt.substring(k + 1);\r\n                        }\r\n\r\n                        resource.extension = pureExt;\r\n                        resource.loadType = (resource as any)._determineLoadType();\r\n                        next();\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            next();\r\n        }\r\n    }\r\n}\r\n","namespace pixi_compressed_textures {\r\n\texport class ExtensionFixer {\r\n\t\tstatic use(this: PIXI.Loader, resource: PIXI.LoaderResource, next: () => any) {\r\n\t\t\tif (resource.texture && resource._defaultUrlChoice && resource._defaultUrl !== resource.url) {\r\n\t\t\t\tlet texture = resource.texture;\r\n\t\t\t\tlet baseTexture = texture.baseTexture;\r\n\r\n\t\t\t\tconst oldUrl = resource.url;\r\n\t\t\t\tconst newUrl = resource._defaultUrlChoice;\r\n\r\n\t\t\t\tlet ind = baseTexture.textureCacheIds.indexOf(oldUrl);\r\n\t\t\t\tif (ind >= 0) {\r\n\t\t\t\t\tbaseTexture.textureCacheIds[ind] = newUrl;\r\n\t\t\t\t\tdelete PIXI.utils.BaseTextureCache[resource.url];\r\n\t\t\t\t\tPIXI.utils.BaseTextureCache[newUrl] = baseTexture;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tind = texture.textureCacheIds.indexOf(oldUrl);\r\n\t\t\t\tif (ind >= 0) {\r\n\t\t\t\t\ttexture.textureCacheIds[ind] = newUrl;\r\n\t\t\t\t\tdelete PIXI.utils.TextureCache[resource.url];\r\n\t\t\t\t\tPIXI.utils.TextureCache[newUrl] = baseTexture;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tnext();\r\n\t\t}\r\n\t}\r\n}\r\n","/// <reference types=\"pixi.js\" />\r\n\r\nnamespace pixi_compressed_textures {\r\n\t(PIXI as any).compressedTextures = pixi_compressed_textures;\r\n}\r\n\r\ndeclare module \"pixi-compressed-textures\" {\r\n\texport = pixi_compressed_textures;\r\n}\r\n","/// <reference path=\"./BASISLoader.ts\"/>\r\n\r\nnamespace pixi_compressed_textures {\r\n\r\n    export class WorkedBASISLoader extends BASISLoader {\r\n        private _mips: Array<IMipmap> = [];\r\n\r\n        constructor(_image: CompressedImage) {\r\n            super(_image);\r\n        }\r\n\r\n        _loadAsync(buffer: ArrayBuffer) {\r\n            const start = performance.now();\r\n            const pool: WorkedBASIS.TranscoderWorkerPool = BASISLoader.BASIS_BINDING as any;\r\n\r\n            const config = {\r\n                genMip: true,\r\n                rgbaFormat: BASISLoader.RGBA_FORMAT.basis,\r\n                rgbFormat: BASISLoader.RGB_FORMAT.basis,\r\n                transfer: true\r\n            };\r\n\r\n            return pool\r\n                .transcode(buffer, config)\r\n                .then( (result: ITranscodeResult ) => \r\n                {\r\n                    const width = result.width;\r\n                    const height = result.height;\r\n                    const srcBuffer = new Uint8Array(result.buffer);\r\n                    const target = result.hasAlpha ? BASISLoader.RGBA_FORMAT : BASISLoader.RGB_FORMAT;\r\n                    const name = target.name.replace(\"COMPRESSED_\", \"\");\r\n                    const dest = this._image;\r\n\r\n                    this._mips = result.mipmaps;\r\n\r\n                    console.log(\"[WorkedBASISLoader] Total transcoding time:\", performance.now() - start);\r\n                    return dest.init(dest.src, srcBuffer, 'BASIS|' + name, width, height, 1, target.native);\r\n                }\r\n            );\r\n        }\r\n\r\n        static loadAndRunTranscoder(options: {path: string, ext: any, threads: number}) {\r\n            return Promise.all([\r\n                fetch(options.path + \"/basis_transcoder.js\").then((r)=>r.text()),\r\n                fetch(options.path + \"/basis_transcoder.wasm\").then((w)=>w.arrayBuffer()),\r\n            ]).then( ([js, wasm]) => {\r\n                WorkedBASISLoader.runTranscoder(Object.assign(options, {\r\n                    jsSource: js, wasmSource: wasm\r\n                }));\r\n            });\r\n        }\r\n\r\n        static runTranscoder(options: {jsSource: string, wasmSource: ArrayBuffer, threads: number, ext: any}) {\r\n            const trans = new WorkedBASIS.TranscoderWorkerPool(options.threads || 2);\r\n            \r\n            super.bindTranscoder(trans as any, options.ext);\r\n\r\n            const idx = Loaders.indexOf(BASISLoader);\r\n            Loaders[idx] = WorkedBASISLoader;\r\n\r\n            return trans.init(options.jsSource, options.wasmSource);\r\n        }\r\n\r\n        levelBufferSize(width:number, height: number, mip: number) {\r\n            return this._mips[mip].size;\r\n        }\r\n    }\r\n}","interface IBasicResult {\r\n    type? : 'error' | 'init' | 'transcode';\r\n}\r\n\r\ninterface IInitResult extends IBasicResult {\r\n    buffer? : ArrayBuffer;\r\n}\r\n\r\ninterface IErrorResult extends IBasicResult{\r\n    type:'error';\r\n    error: string;\r\n}\r\n\r\ninterface ITranscodeOptions {\r\n    rgbaFormat : number;\r\n    rgbFormat : number;\r\n    genMip? : boolean;\r\n    transfer? : boolean;\r\n}\r\n\r\ninterface IMipmap {\r\n    width : number;\r\n    height: number;\r\n    format: number;\r\n    size: number;\r\n}\r\n\r\ninterface ITranscodeResult extends IInitResult {\r\n    type: 'transcode';\r\n    hasAlpha: boolean;\r\n    width: number;\r\n    height: number;\r\n    mipmaps: Array<IMipmap>;\r\n}\r\n\r\nnamespace pixi_compressed_textures.WorkedBASIS {\r\n\r\n    export class BasisWorker {\r\n        static ID = 0;\r\n\r\n        worker : Worker = undefined;\r\n        id: number = BasisWorker.ID ++;\r\n        free: boolean = false;\r\n        initDone: boolean = false;\r\n        binary: ArrayBuffer = undefined;\r\n\r\n        private _rej: (e: any) => void = undefined;\r\n        private _res: (e: any) => void = undefined;\r\n\r\n        init(basisSource: string = undefined, basisBinary: ArrayBuffer = undefined) {\r\n            if(!this.worker) {\r\n                this.worker = generateWorker(basisSource);\r\n            }\r\n\r\n            if(!this.worker) {\r\n                throw \"Can't create worker\";\r\n            }\r\n\r\n            if(this.initDone) {\r\n                return Promise.resolve(true);\r\n            }\r\n            \r\n            console.log(`[BASIS Worker ${this.id}] init start!`);\r\n\r\n            this.worker.addEventListener(\"message\", this._onMessage.bind(this));\r\n            this.worker.addEventListener(\"error\", this._onError.bind(this));        \r\n            this.binary = basisBinary;\r\n\r\n            const initStart = performance.now();\r\n\r\n            return new Promise((res, rej)=>{\r\n                this._rej = rej;\r\n                this._res = res;\r\n                this._init(basisBinary);\r\n            }).then((res : IInitResult)=>{\r\n                console.log(`[BASIS Worker ${this.id}] init done!`, performance.now() - initStart);\r\n\r\n                this.initDone = true;\r\n                this.free = true;\r\n                this.binary = res.buffer;\r\n                return true;\r\n            });\r\n        }\r\n\r\n        transcode(buffer: ArrayBuffer, options: ITranscodeOptions) {\r\n            if(!this.free) {\r\n                throw `[BASIS Worker ${this.id}] Is busy! Check '.free' status!`;\r\n            }\r\n\r\n            if(!buffer \r\n                || options.rgbaFormat === undefined \r\n                || options.rgbFormat === undefined) {\r\n                throw \"Buffer and formats requred!\";\r\n            }\r\n\r\n            const config = {\r\n                rgbaFormat : options.rgbaFormat,\r\n                rgbFormat : options.rgbFormat,\r\n                genMip : options.genMip || false\r\n            };\r\n\r\n            this.free = false;\r\n            return new Promise((res, rej) => {\r\n                this._rej = rej;\r\n                this._res = res;\r\n\r\n                if(options.transfer) {\r\n                    this.worker.postMessage({\r\n                        type : \"transcode\",\r\n                        buffer,\r\n                        config\r\n                    }, [buffer]);\r\n                } else {\r\n                    this.worker.postMessage({\r\n                        type : \"transcode\",\r\n                        buffer,\r\n                        config\r\n                    });\r\n                }\r\n            }).then((result: ITranscodeResult)=>{\r\n                this.free = true;\r\n                return result;\r\n            })\r\n        }\r\n\r\n        _init(bin: ArrayBuffer) {\r\n            this.worker.postMessage({\r\n                type : \"init\", id : 0, wasmBinary: bin\r\n            }, [bin]);\r\n        }\r\n\r\n        _onMessage (event: {data: IBasicResult}) {\r\n            if(event.data.type === \"error\") {\r\n                this._onError((event.data as IErrorResult).error);\r\n            }\r\n\r\n            if(this._res) {\r\n                this._res(event.data);\r\n            }\r\n        }\r\n\r\n        _onError (reason: string) {\r\n            if(this._rej) {\r\n                this._rej(reason);\r\n            }\r\n        }\r\n\r\n        destroy() {\r\n            this.worker.terminate();\r\n        }\r\n    }\r\n\r\n    export class TranscoderWorkerPool {\r\n        public workers: Array<BasisWorker> = [];\r\n        private count: number = 1; \r\n        \r\n        constructor(count:number = 0){\r\n            this.count = count || 1;\r\n        }\r\n\r\n        init(jsSource: string, wasmSource: ArrayBuffer) {\r\n            let  count = 0;\r\n            const next = () => {\r\n                if( ++count > this.count) {\r\n                    return;\r\n                }\r\n                const w = new BasisWorker();\r\n                this.workers.push(w);\r\n                return w.init(jsSource, wasmSource).then(()=>{\r\n                    wasmSource = w.binary;\r\n                    next();\r\n                 });\r\n            };\r\n\r\n            return next().then(()=>{\r\n                return this;\r\n            })\r\n        }\r\n\r\n        transcode(buffer: ArrayBuffer, options: ITranscodeOptions) {\r\n            if(!this.workers || !this.workers.length) {\r\n                throw \"[TranscoderWorkerPool] Pool empty, populate before!\";\r\n            }\r\n            const workers = this.workers;\r\n\r\n            let freeWorker: BasisWorker = undefined;\r\n            let iteration = 0;\r\n\r\n            const search = (doneCallback : (w: BasisWorker) => void) => {\r\n                for(let w of workers) {\r\n                    if(w.free) {\r\n                        freeWorker = w;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if(iteration > 100) {\r\n                    throw \"[TranscoderWorkerPool] Can't found free worker after 100 interation!\";\r\n                }\r\n    \r\n                if(!freeWorker) {\r\n                    setTimeout( () => search(doneCallback), 10 * iteration);\r\n                } else {\r\n                    doneCallback(freeWorker);\r\n                }\r\n\r\n                iteration ++;\r\n            }\r\n    \r\n            return new Promise(search).then( (worker) =>{    \r\n                console.log(`[TranscoderWorkerPool] run transcoding on ${worker.id} worker`);\r\n                return worker.transcode(buffer, options);\r\n            });\r\n        }\r\n        \r\n        destroy() {\r\n            this.workers.forEach((w)=>{\r\n                w.destroy();\r\n            })\r\n            this.workers = undefined;\r\n        }\r\n    }\r\n}\r\n","// @ts-nocheck \r\ndeclare var BASIS: any;\r\n\r\nnamespace pixi_compressed_textures.WorkedBASIS {\r\n\texport const basisWorkerSource = function () {\r\n\t\tlet _BasisFile : any;\r\n\t\tfunction init (message : any) {\r\n\t\t\tconst bin = message.wasmBinary as ArrayBuffer;\r\n\t\t\t__init (bin).then(()=>{\r\n\t\t\t\t//@ts-ignore\r\n\t\t\t\tself.postMessage({ type : \"init\", status : true, buffer : bin }, [bin]); // return back for next workers\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tfunction transcode(message : any) {\r\n\t\t\ttry {\r\n\t\t\t\tconst res = __transcode( message.buffer, message.config);\r\n\r\n\t\t\t\tObject.assign(res, {\r\n\t\t\t\t\ttype : 'transcode',\r\n\t\t\t\t});\r\n\t\t\t\t//@ts-ignore\r\n\t\t\t\tself.postMessage( res, [res.buffer.buffer] );\r\n\r\n\t\t\t} catch ( error ) {\r\n\t\t\t\tconsole.error( error );\r\n\t\t\t\t//@ts-ignore\r\n\t\t\t\tself.postMessage( { type: 'error', id: message.id, error: error.message });\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tonmessage = function ( e ) {\r\n\t\t\tconst message = e.data;\r\n\t\t\tconst func = self[message.type];\r\n\t\t\tif(func) {\r\n\t\t\t\t//@ts-ignore\r\n\t\t\t\tfunc(message);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tfunction __init( wasmBinary: ArrayBuffer ) {\r\n\r\n\t\t\tlet Module: any;\r\n\t\t\treturn new Promise( ( resolve ) => \r\n\t\t\t{\r\n\t\t\t\tModule = { wasmBinary, onRuntimeInitialized: resolve };\r\n\t\t\t\treturn BASIS(Module);\r\n\r\n\t\t\t}).then( () => {\r\n\t\t\t\tconst { BasisFile, initializeBasis } = Module;\r\n\r\n\t\t\t\t_BasisFile = BasisFile;\r\n\t\t\t\tinitializeBasis();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tfunction __transcode( buffer : ArrayBuffer, config: any ) {\r\n\t\t\tconst basisFile = new _BasisFile( new Uint8Array( buffer ) );\r\n\t\t\tconst width = basisFile.getImageWidth( 0, 0 );\r\n\t\t\tconst height = basisFile.getImageHeight( 0, 0 );\r\n\t\t\tconst levels = config.genMip ? basisFile.getNumLevels( 0 ) : 1;\r\n\t\t\tconst hasAlpha = basisFile.getHasAlpha();\r\n\r\n\t\t\tconst cleanup = () => {\r\n\t\t\t\tbasisFile.close();\r\n\t\t\t\tbasisFile.delete();\r\n\t\t\t};\r\n\r\n\t\t\tif (!width || !height || !levels ) {\r\n\t\t\t\tcleanup();\r\n\t\t\t\tthrow 'Invalid .basis file';\r\n\t\t\t}\r\n\r\n\t\t\tif ( ! basisFile.startTranscoding() ) {\r\n\t\t\t\tcleanup();\r\n\t\t\t\tthrow '.startTranscoding failed';\r\n\t\t\t}\r\n\r\n\t\t\tlet totalSize = 0;\r\n\t\t\tlet offset = 0;\r\n\t\t\tlet targetBuffer = undefined;\r\n\t\t\t\r\n\t\t\tconst mipmaps = [];\r\n\t\t\tconst target = hasAlpha ? config.rgbaFormat : config.rgbFormat;\r\n\r\n\t\t\tfor ( let mip = 0; mip < levels; mip ++ ) {\r\n\t\t\t\tconst mipWidth = basisFile.getImageWidth( 0, mip );\r\n\t\t\t\tconst mipHeight = basisFile.getImageHeight( 0, mip );\r\n\t\t\t\tconst size = basisFile.getImageTranscodedSizeInBytes( 0, mip, target );\r\n\t\t\t\t\r\n\t\t\t\t//calc total size of buffer for all mips\r\n\t\t\t\ttotalSize += size;\r\n\t\t\t\tmipmaps.push( { width: mipWidth, height: mipHeight, format: target, size } );\r\n\t\t\t}\r\n\r\n\t\t\ttargetBuffer = new Uint8Array(totalSize);\r\n\t\t\tfor ( let mip = 0; mip < levels; mip ++ ) {\r\n\t\t\t\tconst size = mipmaps[mip].size;\r\n\t\t\t\tconst dst = new Uint8Array(targetBuffer.buffer, offset, size);\r\n\t\t\t\tconst status = basisFile.transcodeImage(\r\n\t\t\t\t\tdst,\r\n\t\t\t\t\t0,\r\n\t\t\t\t\tmip,\r\n\t\t\t\t\ttarget,\r\n\t\t\t\t\t0,\r\n\t\t\t\t\t0\r\n\t\t\t\t);\r\n\r\n\t\t\t\tif (!status) {\r\n\t\t\t\t\tcleanup();\r\n\t\t\t\t\tthrow '.transcodeImage failed.';\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\toffset += size;\r\n\t\t\t\t//mipmaps[mip].data = dst;\r\n\t\t\t}\r\n\r\n\t\t\tcleanup();\r\n\t\t\treturn { width, height, hasAlpha, mipmaps, buffer : targetBuffer};\r\n\t\t}\r\n\t}\r\n\r\n\texport function generateWorker(basisJSSource: string): Worker {\r\n\t\tlet source = basisWorkerSource.toString();\r\n\t\tconst b0 = source.indexOf(\"{\");\r\n\t\tconst b1 = source.lastIndexOf(\"}\");\r\n\t \r\n\t\tsource = basisJSSource + \"\\n\" + source.substring(b0 + 1, b1);\r\n\t\treturn new Worker(URL.createObjectURL(new Blob([source])));\r\n\t} \r\n}"]}