{"version":3,"file":"pixi-compressed-textures.js","sourceRoot":"","sources":["../src/CompressedImage.ts","../src/CompressedTextureManager.ts","../src/ImageParser.ts","../src/extensionChooser.ts","../src/extensionFixer.ts","../src/xporter.ts","../src/loaders/ASTCLoader.ts"],"names":[],"mappings":"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","sourcesContent":["declare module CRN_Module {\r\n    export function _free(src: number): void\r\n\r\n    export let HEAPU8: Uint8Array;\r\n\r\n    export function _crn_get_width(src: number, size: number): number;\r\n\r\n    export function _crn_get_height(src: number, size: number): number;\r\n\r\n    export function _crn_get_levels(src: number, size: number): number;\r\n\r\n    export function _crn_get_dxt_format(src: number, size: number): number;\r\n\r\n    export function _crn_get_uncompressed_size(src: number, size: number, stuff: number): number;\r\n\r\n    export function _malloc(size: number): number;\r\n\r\n    export function _crn_decompress(src: number, srcSize: number, dst: number, dstSize: number, stuff: number): void;\r\n}\r\n\r\ndeclare namespace PIXI {\r\n    interface GLTexture {\r\n        compressed?: boolean;\r\n    }\r\n}\r\n\r\nnamespace pixi_compressed_textures {\r\n//===============//\r\n// PVR constants //\r\n//===============//\r\n\r\n// PVR formats, from:\r\n// http://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_pvrtc/\r\n    const COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00;\r\n    const COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8C01;\r\n    const COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02;\r\n    const COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8C03;\r\n\r\n// ETC1 format, from:\r\n// http://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_etc1/\r\n    const COMPRESSED_RGB_ETC1_WEBGL = 0x8D64;\r\n\r\n    const PVR_FORMAT_2BPP_RGB = 0;\r\n    const PVR_FORMAT_2BPP_RGBA = 1;\r\n    const PVR_FORMAT_4BPP_RGB = 2;\r\n    const PVR_FORMAT_4BPP_RGBA = 3;\r\n    const PVR_FORMAT_ETC1 = 6;\r\n    const PVR_FORMAT_DXT1 = 7;\r\n    const PVR_FORMAT_DXT3 = 9;\r\n    const PVR_FORMAT_DXT5 = 5;\r\n\r\n    const PVR_HEADER_LENGTH = 13; // The header length in 32 bit ints.\r\n    const PVR_MAGIC = 0x03525650; //0x50565203;\r\n\r\n// Offsets into the header array.\r\n    const PVR_HEADER_MAGIC = 0;\r\n    const PVR_HEADER_FORMAT = 2;\r\n    const PVR_HEADER_HEIGHT = 6;\r\n    const PVR_HEADER_WIDTH = 7;\r\n    const PVR_HEADER_MIPMAPCOUNT = 11;\r\n    const PVR_HEADER_METADATA = 12;\r\n\r\n    // DXT formats, from:\r\n// http://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_s3tc/\r\n    const COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;\r\n    const COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;\r\n    const COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;\r\n    const COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;\r\n\r\n// ATC formats, from:\r\n// http://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_atc/\r\n    const COMPRESSED_RGB_ATC_WEBGL = 0x8C92;\r\n    const COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL = 0x8C93;\r\n    const COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL = 0x87EE;\r\n\r\n// DXT values and structures referenced from:\r\n// http://msdn.microsoft.com/en-us/library/bb943991.aspx/\r\n    const DDS_MAGIC = 0x20534444;\r\n    const DDSD_MIPMAPCOUNT = 0x20000;\r\n    const DDPF_FOURCC = 0x4;\r\n\r\n    const DDS_HEADER_LENGTH = 31; // The header length in 32 bit ints.\r\n\r\n// Offsets into the header array.\r\n    const DDS_HEADER_MAGIC = 0;\r\n\r\n    const DDS_HEADER_SIZE = 1;\r\n    const DDS_HEADER_FLAGS = 2;\r\n    const DDS_HEADER_HEIGHT = 3;\r\n    const DDS_HEADER_WIDTH = 4;\r\n\r\n    const DDS_HEADER_MIPMAPCOUNT = 7;\r\n\r\n    const DDS_HEADER_PF_FLAGS = 20;\r\n    const DDS_HEADER_PF_FOURCC = 21;\r\n\r\n// FourCC format identifiers.\r\n    const FOURCC_DXT1 = fourCCToInt32(\"DXT1\");\r\n    const FOURCC_DXT3 = fourCCToInt32(\"DXT3\");\r\n    const FOURCC_DXT5 = fourCCToInt32(\"DXT5\");\r\n\r\n    const FOURCC_ATC = fourCCToInt32(\"ATC \");\r\n    const FOURCC_ATCA = fourCCToInt32(\"ATCA\");\r\n    const FOURCC_ATCI = fourCCToInt32(\"ATCI\");\r\n\r\n//============================//\r\n// DXT constants and utilites //\r\n//============================//\r\n\r\n// Utility functions\r\n// Builds a numeric code for a given fourCC string\r\n    function fourCCToInt32(value: string) {\r\n        return value.charCodeAt(0) +\r\n            (value.charCodeAt(1) << 8) +\r\n            (value.charCodeAt(2) << 16) +\r\n            (value.charCodeAt(3) << 24);\r\n    }\r\n\r\n    // Turns a fourCC numeric code into a string\r\n    function int32ToFourCC(value: number) {\r\n        return String.fromCharCode(\r\n            value & 0xff,\r\n            (value >> 8) & 0xff,\r\n            (value >> 16) & 0xff,\r\n            (value >> 24) & 0xff\r\n        );\r\n    }\r\n\r\n    // Calcualates the size of a compressed texture level in bytes\r\n    function textureLevelSize(format: number, width: number, height: number) {\r\n        switch (format) {\r\n            case COMPRESSED_RGB_S3TC_DXT1_EXT:\r\n            case COMPRESSED_RGB_ATC_WEBGL:\r\n            case COMPRESSED_RGB_ETC1_WEBGL:\r\n                return ((width + 3) >> 2) * ((height + 3) >> 2) * 8;\r\n\r\n            case COMPRESSED_RGBA_S3TC_DXT3_EXT:\r\n            case COMPRESSED_RGBA_S3TC_DXT5_EXT:\r\n            case COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL:\r\n            case COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL:\r\n                return ((width + 3) >> 2) * ((height + 3) >> 2) * 16;\r\n\r\n            case COMPRESSED_RGB_PVRTC_4BPPV1_IMG:\r\n            case COMPRESSED_RGBA_PVRTC_4BPPV1_IMG:\r\n                return Math.floor((Math.max(width, 8) * Math.max(height, 8) * 4 + 7) / 8);\r\n\r\n            case COMPRESSED_RGB_PVRTC_2BPPV1_IMG:\r\n            case COMPRESSED_RGBA_PVRTC_2BPPV1_IMG:\r\n                return Math.floor((Math.max(width, 16) * Math.max(height, 8) * 2 + 7) / 8);\r\n\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    export function loadFromArrayBuffer(arrayBuffer: ArrayBuffer, src: string, crnLoad?: boolean): CompressedImage {\r\n        return new CompressedImage(src).loadFromArrayBuffer(arrayBuffer, crnLoad);\r\n    }\r\n\r\n    export class CompressedImage extends PIXI.resources.Resource {\r\n        private _internalLoader: ASTC_Loader;\r\n        public flipY : boolean = false;\r\n        constructor(src: string, data?: Uint8Array, type?: string, width?: number, height?: number, levels?: number, internalFormat?: number) {\r\n            super();\r\n            this.init(src, data, type, width, height, levels, internalFormat)\r\n        }\r\n\r\n        init(src: string, data: Uint8Array, type: string, width: number = -1, height: number = -1, levels: number, internalFormat: number,\r\n             crunchCache?: Array<number>): CompressedImage {\r\n            this.src = src;\r\n            (this.resize as any)(width, height);\r\n            this._width = width;\r\n            this._height = height;\r\n            this.data = data;\r\n            this.type = type;\r\n            this.levels = levels;\r\n            this.internalFormat = internalFormat;\r\n            this.crunch = crunchCache;\r\n\r\n            let oldComplete = this.complete;\r\n            this.complete = !!data;\r\n            if (!oldComplete && this.complete && this.onload) {\r\n                this.onload({target: this});\r\n            }\r\n            this.update();\r\n\r\n            return this;\r\n        }\r\n\r\n        complete = false;\r\n        isCompressedImage = true;\r\n        preserveSource = true;\r\n\r\n        onload: (event: Object) => void = null;\r\n\r\n        src: string;\r\n        data: Uint8Array;\r\n        type: string;\r\n        width: number;\r\n        height: number;\r\n        levels: number;\r\n        internalFormat: number;\r\n        crunch?: Array<number>;\r\n\r\n        baseTexture: PIXI.BaseTexture = null;\r\n\r\n        dispose() {\r\n            this.data = null;\r\n        }\r\n\r\n        bind(baseTexture: PIXI.BaseTexture) {\r\n            baseTexture.premultiplyAlpha = false;\r\n            super.bind(baseTexture);\r\n        }\r\n\r\n        upload(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture): boolean {\r\n            const gl = renderer.state.gl;\r\n\r\n            glTexture.compressed = false;\r\n            renderer.texture.initCompressed();\r\n\r\n            if (this.data === null) {\r\n                throw \"Trying to create a second (or more) webgl texture from the same CompressedImage : \" + this.src;\r\n            }\r\n\r\n            const levels = this.levels;\r\n            \r\n            let width = this.width;\r\n            let height = this.height;\r\n            let offset = 0;\r\n            \r\n            // ASTC is flipped\r\n            // BUT compressed textures doesn't flips\r\n            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, !!this.flipY);\r\n\r\n            // Loop through each mip level of compressed texture data provided and upload it to the given texture.\r\n            for (let i = 0; i < levels; ++i) {\r\n                // Determine how big this level of compressed texture data is in bytes.\r\n                let levelSize = textureLevelSize(this.internalFormat, width, height);\r\n                \r\n                //ASTC us ref\r\n                if(this._internalLoader) {\r\n                    levelSize = this._internalLoader.levelSize(width, height);\r\n                }\r\n\r\n                // Get a view of the bytes for this level of DXT data.\r\n                let dxtLevel = new Uint8Array(this.data.buffer, this.data.byteOffset + offset, levelSize);\r\n\r\n                // Upload!\r\n                gl.compressedTexImage2D(gl.TEXTURE_2D, i, this.internalFormat, width, height, 0, dxtLevel);\r\n                // The next mip level will be half the height and width of this one.\r\n                \r\n                width = width >> 1;\r\n                if (width < 1) {\r\n                    width = 1;\r\n                }\r\n                \r\n                height = height >> 1;\r\n                if (height < 1) {\r\n                    height = 1;\r\n                }\r\n                // Advance the offset into the compressed texture data past the current mip level's data.\r\n                offset += levelSize;\r\n            }\r\n\r\n            // reset for default texture\r\n            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n            \r\n\r\n            if (this.crunch) {\r\n                CRN_Module._free(this.crunch[0]); // source\r\n                CRN_Module._free(this.crunch[1]); // destination\r\n            }\r\n\r\n            // Cleaning the data to save memory. NOTE : BECAUSE OF THIS WE CANNOT CREATE TWO GL TEXTURE FROM THE SAME COMPRESSED IMAGE !\r\n            if (!this.preserveSource)\r\n                this.data = null;\r\n\r\n            return true;\r\n        }\r\n\r\n        style(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture): boolean {\r\n            // We can't use gl.generateMipmaps with compressed textures, so only use\r\n            // mipmapped filtering if the compressed texture data contained mip levels.\r\n\r\n            //TODO: add mipmap flag here?\r\n            const gl = renderer.state.gl;\r\n            const levels = this.levels;\r\n            if (baseTexture.scaleMode === PIXI.SCALE_MODES.LINEAR) {\r\n                if (levels > 1) {\r\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);\r\n                } else {\r\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n                }\r\n            } else {\r\n                if (levels > 1) {\r\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST_MIPMAP_NEAREST);\r\n                } else {\r\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        loadFromArrayBuffer(arrayBuffer: ArrayBuffer, crnLoad?: boolean): CompressedImage {\r\n            const head = new Uint32Array(arrayBuffer, 0, 1)[0];\r\n            //todo: implement onload\r\n            if (head === DDS_MAGIC){\r\n                return this._loadDDS(arrayBuffer);\r\n            }\r\n            else if (head === PVR_MAGIC){\r\n                return this._loadPVR(arrayBuffer);\r\n            }\r\n            else if(ASTC_Loader.test(arrayBuffer)){\r\n                this._internalLoader = new ASTC_Loader(this, false);\r\n                return this._internalLoader.load(arrayBuffer);\r\n            }\r\n            else if (crnLoad){\r\n                return this._loadCRN(arrayBuffer);\r\n            }\r\n            else{\r\n                throw new Error(\"Compressed texture format is not recognized: \" + this.src);\r\n            }\r\n        }\r\n\r\n        arrayBufferCopy(src: Uint8Array, dst: Uint8Array, dstByteOffset: number, numBytes: number): void {\r\n            const dst32Offset = dstByteOffset / 4;\r\n            const tail = (numBytes % 4);\r\n            const src32 = new Uint32Array(src.buffer, 0, (numBytes - tail) / 4);\r\n            const dst32 = new Uint32Array(dst.buffer);\r\n            for (let ii = 0; ii < src32.length; ii++) {\r\n                dst32[dst32Offset + ii] = src32[ii];\r\n            }\r\n            for (let i = numBytes - tail; i < numBytes; i++) {\r\n                dst[dstByteOffset + i] = src[i];\r\n            }\r\n        }\r\n\r\n        _loadCRN(arrayBuffer: ArrayBuffer) {\r\n            // Taken from crnlib.h\r\n            const DXT_FORMAT_MAP = [\r\n                COMPRESSED_RGB_S3TC_DXT1_EXT, \t// 0\r\n                COMPRESSED_RGBA_S3TC_DXT3_EXT,  // 1\r\n                COMPRESSED_RGBA_S3TC_DXT5_EXT \t// 2\r\n            ];\r\n\r\n            const srcSize = arrayBuffer.byteLength;\r\n            const bytes = new Uint8Array(arrayBuffer);\r\n            const src = CRN_Module._malloc(srcSize);\r\n            CompressedImage.prototype.arrayBufferCopy(bytes, CRN_Module.HEAPU8, src, srcSize);\r\n\r\n            let perfTime = performance.now();\r\n\r\n            const width = CRN_Module._crn_get_width(src, srcSize);\r\n            const height = CRN_Module._crn_get_height(src, srcSize);\r\n            const levels = CRN_Module._crn_get_levels(src, srcSize);\r\n            const format = CRN_Module._crn_get_dxt_format(src, srcSize);\r\n\r\n            const dstSize = CRN_Module._crn_get_uncompressed_size(src, srcSize, 0);\r\n            const dst = CRN_Module._malloc(dstSize);\r\n            CRN_Module._crn_decompress(src, srcSize, dst, dstSize, 0);\r\n            const dxtData = new Uint8Array(CRN_Module.HEAPU8.buffer, dst, dstSize);\r\n\r\n            perfTime = performance.now() - perfTime;\r\n\r\n            return this.init(this.src, dxtData, 'CRN', width, height, levels, DXT_FORMAT_MAP[format], [src, dst]);\r\n        }\r\n\r\n        _loadDDS(arrayBuffer: ArrayBuffer) {\r\n            // Get a view of the arrayBuffer that represents the DDS header.\r\n            const header = new Int32Array(arrayBuffer, 0, DDS_HEADER_LENGTH);\r\n\r\n            // Do some sanity checks to make sure this is a valid DDS file.\r\n            if (header[DDS_HEADER_MAGIC] != DDS_MAGIC)\r\n                throw \"Invalid magic number in DDS header\";\r\n\r\n            if (!(header[DDS_HEADER_PF_FLAGS] & DDPF_FOURCC))\r\n                throw \"Unsupported format, must contain a FourCC code\";\r\n\r\n            // Determine what type of compressed data the file contains.\r\n            const fourCC = header[DDS_HEADER_PF_FOURCC];\r\n            let internalFormat;\r\n            switch (fourCC) {\r\n                case FOURCC_DXT1:\r\n                    internalFormat = COMPRESSED_RGB_S3TC_DXT1_EXT;\r\n                    break;\r\n                case FOURCC_DXT3:\r\n                    internalFormat = COMPRESSED_RGBA_S3TC_DXT3_EXT;\r\n                    break;\r\n                case FOURCC_DXT5:\r\n                    internalFormat = COMPRESSED_RGBA_S3TC_DXT5_EXT;\r\n                    break;\r\n                case FOURCC_ATC:\r\n                    internalFormat = COMPRESSED_RGB_ATC_WEBGL;\r\n                    break;\r\n                case FOURCC_ATCA:\r\n                    internalFormat = COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL;\r\n                    break;\r\n                case FOURCC_ATCI:\r\n                    internalFormat = COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL;\r\n                    break;\r\n                default:\r\n                    throw new Error(\"Unsupported FourCC code: \" + int32ToFourCC(fourCC));\r\n            }\r\n\r\n            // Determine how many mipmap levels the file contains.\r\n            let levels = 1;\r\n            if (header[DDS_HEADER_FLAGS] & DDSD_MIPMAPCOUNT) {\r\n                levels = Math.max(1, header[DDS_HEADER_MIPMAPCOUNT]);\r\n            }\r\n\r\n            // Gather other basic metrics and a view of the raw the DXT data.\r\n            const width = header[DDS_HEADER_WIDTH];\r\n            const height = header[DDS_HEADER_HEIGHT];\r\n            const dataOffset = header[DDS_HEADER_SIZE] + 4;\r\n            const dxtData = new Uint8Array(arrayBuffer, dataOffset);\r\n\r\n            return this.init(this.src, dxtData, 'DDS', width, height, levels, internalFormat);\r\n        }\r\n\r\n        _loadPVR(arrayBuffer: ArrayBuffer) {\r\n            // Get a view of the arrayBuffer that represents the DDS header.\r\n            const header = new Int32Array(arrayBuffer, 0, PVR_HEADER_LENGTH);\r\n\r\n            // Do some sanity checks to make sure this is a valid DDS file.\r\n            if (header[PVR_HEADER_MAGIC] != PVR_MAGIC)\r\n                throw \"Invalid magic number in PVR header\";\r\n\r\n            // Determine what type of compressed data the file contains.\r\n            const format = header[PVR_HEADER_FORMAT];\r\n            let internalFormat;\r\n            switch (format) {\r\n                case PVR_FORMAT_2BPP_RGB:\r\n                    internalFormat = COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\r\n                    break;\r\n                case PVR_FORMAT_2BPP_RGBA:\r\n                    internalFormat = COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\r\n                    break;\r\n                case PVR_FORMAT_4BPP_RGB:\r\n                    internalFormat = COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\r\n                    break;\r\n                case PVR_FORMAT_4BPP_RGBA:\r\n                    internalFormat = COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\r\n                    break;\r\n                case PVR_FORMAT_ETC1:\r\n                    internalFormat = COMPRESSED_RGB_ETC1_WEBGL;\r\n                    break;\r\n                case PVR_FORMAT_DXT1:\r\n                    internalFormat = COMPRESSED_RGB_S3TC_DXT1_EXT;\r\n                    break;\r\n                case PVR_FORMAT_DXT3:\r\n                    internalFormat = COMPRESSED_RGBA_S3TC_DXT3_EXT;\r\n                    break;\r\n                case PVR_FORMAT_DXT5:\r\n                    internalFormat = COMPRESSED_RGBA_S3TC_DXT5_EXT;\r\n                    break;\r\n                default:\r\n                    throw new Error(\"Unsupported PVR format: \" + format);\r\n            }\r\n\r\n            // Gather other basic metrics and a view of the raw the DXT data.\r\n            const width = header[PVR_HEADER_WIDTH];\r\n            const height = header[PVR_HEADER_HEIGHT];\r\n            const levels = header[PVR_HEADER_MIPMAPCOUNT];\r\n            const dataOffset = header[PVR_HEADER_METADATA] + 52;\r\n            const pvrtcData = new Uint8Array(arrayBuffer, dataOffset);\r\n\r\n            return this.init(this.src, pvrtcData, 'PVR', width, height, levels, internalFormat);\r\n        }\r\n    }\r\n}\r\n","declare namespace PIXI.systems {\r\n    interface TextureSystem {\r\n        initCompressed?(): void;\r\n\r\n        compressedExtensions?: any;\r\n    }\r\n}\r\n\r\nnamespace pixi_compressed_textures {\r\n    PIXI.systems.TextureSystem.prototype.initCompressed = function() {\r\n        const gl = this.gl;\r\n        if (!this.compressedExtensions) {\r\n            this.compressedExtensions = {\r\n                dxt: gl.getExtension(\"WEBGL_compressed_texture_s3tc\"),\r\n                pvrtc: gl.getExtension(\"WEBGL_compressed_texture_pvrtc\"),\r\n                astc: gl.getExtension(\"WEBGL_compressed_texture_astc\"),\r\n                atc: gl.getExtension(\"WEBGL_compressed_texture_atc\"),\r\n                etc1: gl.getExtension(\"WEBGL_compressed_texture_etc1\")\r\n            };\r\n            this.compressedExtensions.crn = this.compressedExtensions.dxt;\r\n        }\r\n    };\r\n\r\n    export function detectExtensions(renderer: PIXI.Renderer, resolution?: number) {\r\n        let extensions = [];\r\n        if (renderer instanceof PIXI.Renderer) {\r\n            renderer.texture.initCompressed();\r\n            let data = renderer.texture.compressedExtensions;\r\n            if (data.dxt) extensions.push('.dds');\r\n            if (data.pvrtc) extensions.push('.pvr');\r\n            if (data.atc) extensions.push('.atc');\r\n            if (data.astc) extensions.push('.astc');\r\n            if (data.etc1) extensions.push('.etc1');\r\n        }\r\n        //retina or not\r\n        resolution = resolution || renderer.resolution;\r\n        let res = \"@\"+resolution+\"x\";\r\n        let ext = extensions.slice(0);\r\n        while (ext.length > 0) {\r\n            extensions.push(res + ext.pop());\r\n        }\r\n        extensions.push(res + \".png\");\r\n        extensions.push(res + \".jpg\");\r\n        //atlas support @1x @2x @.5x\r\n        extensions.push(res + \".json\");\r\n        extensions.push(res + \".atlas\");\r\n        return extensions;\r\n    }\r\n}\r\n","declare namespace PIXI {\r\n    interface LoaderResource {\r\n        compressedImage?: pixi_compressed_textures.CompressedImage;\r\n        isCompressedImage?: boolean;\r\n    }\r\n}\r\n\r\nnamespace pixi_compressed_textures {\r\n    import Resource = PIXI.LoaderResource;\r\n\r\n    Resource.setExtensionXhrType('dds', Resource.XHR_RESPONSE_TYPE.BUFFER);\r\n    Resource.setExtensionXhrType('crn', Resource.XHR_RESPONSE_TYPE.BUFFER);\r\n    Resource.setExtensionXhrType('pvr', Resource.XHR_RESPONSE_TYPE.BUFFER);\r\n    Resource.setExtensionXhrType('etc1', Resource.XHR_RESPONSE_TYPE.BUFFER);\r\n    Resource.setExtensionXhrType('astc', Resource.XHR_RESPONSE_TYPE.BUFFER);\r\n\r\n    export class ImageParser {\r\n        static use(this: PIXI.Loader, resource: PIXI.LoaderResource, next: () => any) {\r\n            if (resource.url.indexOf('.crn') < 0 && resource.url.indexOf('.dds') < 0\r\n                && resource.url.indexOf('.pvr') < 0 && resource.url.indexOf('.etc1') < 0\r\n                && resource.url.indexOf('.astc') < 0) {\r\n                next();\r\n                return;\r\n            }\r\n\r\n            if (!resource.data) {\r\n                throw new Error(\"compressedImageParser middleware for PixiJS v5 must be specified in loader.use()\" +\r\n                    \" and must have resource.data when completed\");\r\n            }\r\n            if (resource.compressedImage) {\r\n                // ImageParser was added twice! ignore it.\r\n                next();\r\n                return;\r\n            }\r\n            resource.compressedImage = new CompressedImage(resource.url);\r\n            resource.compressedImage.loadFromArrayBuffer(resource.data, resource.url.indexOf(\".crn\") >= 0);\r\n            resource.isCompressedImage = true;\r\n            resource.texture = fromResource(resource.compressedImage, resource.url, resource.name);\r\n            next();\r\n        }\r\n    }\r\n\r\n    function fromResource(resource: PIXI.resources.Resource, imageUrl: string, name: string) {\r\n        const baseTexture = new PIXI.BaseTexture(resource, {\r\n            scaleMode: PIXI.settings.SCALE_MODE,\r\n            resolution: PIXI.utils.getResolutionOfUrl(imageUrl),\r\n        });\r\n\r\n        const texture = new PIXI.Texture(baseTexture);\r\n\r\n        // No name, use imageUrl instead\r\n        if (!name)\r\n        {\r\n            name = imageUrl;\r\n        }\r\n\r\n        // lets also add the frame to pixi's global cache for 'fromLoader' function\r\n        PIXI.BaseTexture.addToCache(texture.baseTexture, name);\r\n        PIXI.Texture.addToCache(texture, name);\r\n\r\n        // also add references by url if they are different.\r\n        if (name !== imageUrl)\r\n        {\r\n            PIXI.BaseTexture.addToCache(texture.baseTexture, imageUrl);\r\n            PIXI.Texture.addToCache(texture, imageUrl);\r\n        }\r\n\r\n        return texture;\r\n    }\r\n\r\n    PIXI.Loader.registerPlugin(ImageParser);\r\n}\r\n","declare namespace PIXI {\r\n\tinterface LoaderResource {\r\n\t\t_defaultUrlChoice?: string;\r\n\t\t_defaultUrl?: string;\r\n\t\t_baseUrl?: string;\r\n\t}\r\n}\r\n\r\nnamespace pixi_compressed_textures {\r\n    export function extensionChooser(supportedExtensions : Array<string> = []) {\r\n        return function(this: PIXI.Loader, resource: PIXI.LoaderResource, next: () => any) {\r\n            let ext = resource.metadata.choice;\r\n            if (!ext) {\r\n                return next();\r\n            }\r\n            //let us choose extension!\r\n            let url = resource.url;\r\n            let k = 0;\r\n            if (!resource._defaultUrlChoice) {\r\n                resource._defaultUrlChoice = url;\r\n                k = url.lastIndexOf(\".\");\r\n                if (k >= 0) {\r\n                    resource._baseUrl = url.substring(0, k);\r\n                } else {\r\n                    return next();\r\n                }\r\n            }\r\n            for (let i = ext.length - 1; i >= 0; i--) {\r\n                url = resource._baseUrl + ext[i];\r\n                let isSupported = false;\r\n                for (let j = 0; j < supportedExtensions.length; j++) {\r\n                    if (ext[i] === supportedExtensions[j]) {\r\n                        resource.url = url;\r\n\r\n                        let pureExt = ext[i];\r\n                        if (pureExt.indexOf('@') > -1) {\r\n                            //@0.5x.dds should have pureExt \"dds\", not 5x.dds\r\n                            // -> remove format specifier (@2x, @0.5x) before\r\n                            //determining the extension\r\n                            pureExt = pureExt.replace(/@[0-9.]*x/, \"\");\r\n                        }\r\n                        k = pureExt.indexOf('.');\r\n                        if (k >= 0) {\r\n                            pureExt = pureExt.substring(k + 1);\r\n                        }\r\n\r\n                        resource.extension = pureExt;\r\n                        resource.loadType = (resource as any)._determineLoadType();\r\n                        next();\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            next();\r\n        }\r\n    }\r\n}\r\n","namespace pixi_compressed_textures {\r\n\texport class ExtensionFixer {\r\n\t\tstatic use(this: PIXI.Loader, resource: PIXI.LoaderResource, next: () => any) {\r\n\t\t\tif (resource.texture && resource._defaultUrlChoice && resource._defaultUrl !== resource.url) {\r\n\t\t\t\tlet texture = resource.texture;\r\n\t\t\t\tlet baseTexture = texture.baseTexture;\r\n\r\n\t\t\t\tconst oldUrl = resource.url;\r\n\t\t\t\tconst newUrl = resource._defaultUrlChoice;\r\n\r\n\t\t\t\tlet ind = baseTexture.textureCacheIds.indexOf(oldUrl);\r\n\t\t\t\tif (ind >= 0) {\r\n\t\t\t\t\tbaseTexture.textureCacheIds[ind] = newUrl;\r\n\t\t\t\t\tdelete PIXI.utils.BaseTextureCache[resource.url];\r\n\t\t\t\t\tPIXI.utils.BaseTextureCache[newUrl] = baseTexture;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tind = texture.textureCacheIds.indexOf(oldUrl);\r\n\t\t\t\tif (ind >= 0) {\r\n\t\t\t\t\ttexture.textureCacheIds[ind] = newUrl;\r\n\t\t\t\t\tdelete PIXI.utils.TextureCache[resource.url];\r\n\t\t\t\t\tPIXI.utils.TextureCache[newUrl] = baseTexture;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tnext();\r\n\t\t}\r\n\t}\r\n}\r\n","/// <reference types=\"pixi.js\" />\r\n\r\nnamespace pixi_compressed_textures {\r\n\t(PIXI as any).compressedTextures = pixi_compressed_textures;\r\n}\r\n\r\ndeclare module \"pixi-compressed-textures\" {\r\n\texport = pixi_compressed_textures;\r\n}\r\n","\r\n\r\nconst ASTC_DIMS_TO_FORMAT = {\r\n    [4*4] : 0,\r\n    [5*4] : 1,\r\n    [5*5] : 2,\r\n    [6*5] : 3,\r\n    [6*6] : 4,\r\n    [8*5] : 5,\r\n    [8*6] : 6,\r\n    [8*8] : 7,\r\n    [10*5] : 8,\r\n    [10*6] : 9,\r\n    [10*8] : 10,\r\n    [10*10] : 11,\r\n    [12*10] : 12,\r\n    [12*12] : 13\r\n}\r\n\r\n// ASTC Formats, from\r\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_astc/\r\n// https://arm-software.github.io/opengl-es-sdk-for-android/astc_textures.html\r\n\r\n/** HEADER\r\n * struct astcheader\r\n    {\r\n        uint8_t magic [ 4 ] ;\r\n        uint8_t blockdim_x ;\r\n        uint8_t blockdim_y ;\r\n        uint8_t blockdim_z ;\r\n        uint8_t x_size [ 3 ] ;\r\n        uint8_t y_size [ 3 ] ;\r\n        uint8_t z_size [ 3 ] ;\r\n    } ;\r\n */\r\n\r\nnamespace pixi_compressed_textures {\r\n     \r\n    // headers\r\n    const ASTC_HEADER_LENGTH = 16;\r\n    // uint 8\r\n    const ASTC_HEADER_DIM_X = 4;\r\n    // uint 8\r\n    const ASTC_HEADER_DIM_Y = 5;\r\n    // uint 24\r\n    const ASTC_HEADER_WIDTH = 7;\r\n    //uint 24\r\n    const ASTC_HEADER_HEIGHT = 10;\r\n    \r\n    const ASTC_MAGIC = 0x5CA1AB13;\r\n\r\n    /* Compressed Texture Format */\r\n    const COMPRESSED_RGBA_ASTC_4x4_KHR  = 0x93B0;\r\n    const COMPRESSED_RGBA_ASTC_5x4_KHR = 0x93B1;\r\n    const COMPRESSED_RGBA_ASTC_5x5_KHR = 0x93B2;\r\n    const COMPRESSED_RGBA_ASTC_6x5_KHR = 0x93B3;\r\n    const COMPRESSED_RGBA_ASTC_6x6_KHR = 0x93B4;\r\n    const COMPRESSED_RGBA_ASTC_8x5_KHR = 0x93B5;\r\n    const COMPRESSED_RGBA_ASTC_8x6_KHR = 0x93B6;\r\n    const COMPRESSED_RGBA_ASTC_8x8_KHR = 0x93B7;\r\n    const COMPRESSED_RGBA_ASTC_10x5_KHR = 0x93B8;\r\n    const COMPRESSED_RGBA_ASTC_10x6_KHR = 0x93B9;\r\n    const COMPRESSED_RGBA_ASTC_10x8_KHR = 0x93BA;\r\n    const COMPRESSED_RGBA_ASTC_10x10_KHR = 0x93BB;\r\n    const COMPRESSED_RGBA_ASTC_12x10_KHR = 0x93BC;\r\n    const COMPRESSED_RGBA_ASTC_12x12_KHR = 0x93BD;\r\n\r\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 0x93D0;\r\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 0x93D1;\r\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 0x93D2;\r\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 0x93D3;\r\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 0x93D4;\r\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 0x93D5;\r\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 0x93D6;\r\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 0x93D7;\r\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 0x93D8;\r\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 0x93D9;\r\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 0x93DA;\r\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 0x93DB;\r\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 0x93DC;\r\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 0x93DD;\r\n\r\n    export class ASTC_Loader {\r\n        private _format: number = 0;\r\n        private _blockSize: {x : number; y: number}= {x: 0, y: 0};\r\n\r\n        constructor(private _image: CompressedImage = new CompressedImage(\"unknown\"), public useSRGB = false) {}\r\n\r\n        load(buffer: ArrayBuffer) {\r\n            if (!ASTC_Loader.test(buffer)) {\r\n                // Do some sanity checks to make sure this is a valid ASTC file.\r\n                throw \"Invalid magic number in ASTC header\";\r\n            }\r\n            \r\n            const header = new Uint8Array(buffer, 0, ASTC_HEADER_LENGTH);\r\n            const dim_x = header[ASTC_HEADER_DIM_X];\r\n            const dim_y = header[ASTC_HEADER_DIM_Y];\r\n            const width =  (header[ASTC_HEADER_WIDTH]) + (header[ASTC_HEADER_WIDTH + 1] << 8) + (header[ASTC_HEADER_WIDTH + 2] << 16);\r\n            const height = (header[ASTC_HEADER_HEIGHT]) + (header[ASTC_HEADER_HEIGHT + 1] << 8) + (header[ASTC_HEADER_HEIGHT + 2] << 16);\r\n            const internalFormat = ASTC_DIMS_TO_FORMAT[dim_x * dim_y] + ( this.useSRGB ? COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : COMPRESSED_RGBA_ASTC_4x4_KHR);\r\n            const astcData = new Uint8Array(buffer, ASTC_HEADER_LENGTH);\r\n\r\n            this._format = internalFormat;\r\n            this._blockSize.x = dim_x;\r\n            this._blockSize.y = dim_y;\r\n\r\n            const dest = this._image;\r\n            dest.init(dest.src, astcData, 'ASTC', width, height, 1, internalFormat);\r\n            dest.flipY = true;\r\n            return dest;\r\n        }\r\n\r\n        \r\n        static test(buffer: ArrayBuffer) {\r\n            const magic = new Int32Array(buffer, 0, 1);\r\n            return magic[0] === ASTC_MAGIC;\r\n        }\r\n        \r\n        levelSize(width : number, height : number): number {\r\n            const f_ = Math.floor;\r\n            const dim_x = this._blockSize.x;\r\n            const dim_y = this._blockSize.y;\r\n            \r\n            return (f_((width + dim_x - 1) / dim_x) * f_((height + dim_y - 1) / dim_y)) << 4;\r\n        }\r\n    }\r\n}"]}